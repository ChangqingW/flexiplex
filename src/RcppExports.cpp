// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// flexiplex
int flexiplex(Rcpp::String reads_in, Rcpp::String barcodes_file, bool bc_as_readid, int max_bc_editdistance, int max_flank_editdistance, Rcpp::List pattern, Rcpp::String reads_out, Rcpp::String stats_out, Rcpp::String bc_out, int n_threads);
RcppExport SEXP _flexiplex_flexiplex(SEXP reads_inSEXP, SEXP barcodes_fileSEXP, SEXP bc_as_readidSEXP, SEXP max_bc_editdistanceSEXP, SEXP max_flank_editdistanceSEXP, SEXP patternSEXP, SEXP reads_outSEXP, SEXP stats_outSEXP, SEXP bc_outSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type reads_in(reads_inSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type barcodes_file(barcodes_fileSEXP);
    Rcpp::traits::input_parameter< bool >::type bc_as_readid(bc_as_readidSEXP);
    Rcpp::traits::input_parameter< int >::type max_bc_editdistance(max_bc_editdistanceSEXP);
    Rcpp::traits::input_parameter< int >::type max_flank_editdistance(max_flank_editdistanceSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type pattern(patternSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type reads_out(reads_outSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type stats_out(stats_outSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type bc_out(bc_outSEXP);
    Rcpp::traits::input_parameter< int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(flexiplex(reads_in, barcodes_file, bc_as_readid, max_bc_editdistance, max_flank_editdistance, pattern, reads_out, stats_out, bc_out, n_threads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_flexiplex_flexiplex", (DL_FUNC) &_flexiplex_flexiplex, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_flexiplex(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
